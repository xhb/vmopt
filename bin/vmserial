#!/usr/bin/env ruby
#encoding: utf-8
require "vmopt/serialport_operation"
require "optparse"
require "json"

option = {}
option_parser = OptionParser.new do | opts |
  opts.banner = %q/
  Help: 
    Description:
      vmserial tool, use for vm serialport operation,including query info, write data, and read data.
    function:
      1.get_serial_port        
      2.write  串口号，写入的字符串
      3.read   串口号

    Example:
      vmserial --query  serialport    
      vmserial --write  --serialnumber com1  --msg  helloworld
      vmserial --read   --serialnumber com2  
  /

  opts.on('-q serialport', '--query  serialport', 'Query serialport information') do |value|
    option[:serialport] = value
    option[:cmd] = "query"
  end
  
  opts.on('-w', '--write', 'write serialport information') do |value|
    option[:cmd] = "write"
  end

  opts.on('-r', '--read', 'Read serialport information') do |value|
    option[:cmd] = "read"
  end
  
  opts.on('-s com', '--serialnumber com ', 'serialnumber') do |value|
    option[:serialnumber] = value
  end

  opts.on('-m msgstr', '--msg msgstr', 'serialport data to trans') do |value|
    option[:msg] = value
  end

end.parse!
   
   resultok = {"status"=>"0"}
   resultfail = {"status"=>"-1"}
   data_value=[]
   $sys = Vmopt::SerialPortOperation.new
   case option[:cmd] 
   when "query"
     if option[:serialport]  == 'serialport'
        data_value = $sys.get_serial_port
     else 
        puts "Please check the params..."
     end

   when "write"
     if !option[:serialnumber].nil? and !option[:msg].nil?
        ret = $sys.write(option[:serialnumber],option[:msg])
        data_value<<"write serialport success"
     else 
        puts "Please check the params..."
     end

   when "read"
     unless option[:serialnumber].nil?
       ret = $sys.read(option[:serialnumber])
       data_value<<ret
     else 
        puts "Please check --the params..."
     end
   else
    system("vmserial -help") 
   end


   if ret==false
     resultfail["data"]="serialport operation fail"
     retjson = JSON.generate resultfail
   else
     resultok["data"]=data_value
     retjson = JSON.generate resultok 
   end

   puts retjson unless option[:cmd].nil?

